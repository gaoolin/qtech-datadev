/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.qtech.mq.serializer;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class WbOlpRawDataCompositeKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WbOlpRawDataCompositeKey\",\"namespace\":\"com.qtech.mq.serializer\",\"fields\":[{\"name\":\"dt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"simId\",\"type\":\"string\"},{\"name\":\"mcId\",\"type\":\"string\"},{\"name\":\"lineNo\",\"type\":\"int\"},{\"name\":\"checkPort\",\"type\":\"int\"},{\"name\":\"piecesIndex\",\"type\":\"int\"}]}");
    private static final long serialVersionUID = -6790851581881788434L;
    private static final SpecificData MODEL$ = new SpecificData();
    private static final BinaryMessageEncoder<WbOlpRawDataCompositeKey> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);
    private static final BinaryMessageDecoder<WbOlpRawDataCompositeKey> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);
    private static final org.apache.avro.Conversion<?>[] conversions =
            new org.apache.avro.Conversion<?>[]{
                    new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
                    null,
                    null,
                    null,
                    null,
                    null,
                    null
            };
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<WbOlpRawDataCompositeKey>
            WRITER$ = (org.apache.avro.io.DatumWriter<WbOlpRawDataCompositeKey>) MODEL$.createDatumWriter(SCHEMA$);
    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<WbOlpRawDataCompositeKey>
            READER$ = (org.apache.avro.io.DatumReader<WbOlpRawDataCompositeKey>) MODEL$.createDatumReader(SCHEMA$);

    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    }

    private java.time.Instant dt;
    private java.lang.CharSequence simId;
    private java.lang.CharSequence mcId;
    private int lineNo;
    private int checkPort;
    private int piecesIndex;
    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public WbOlpRawDataCompositeKey() {
    }
    /**
     * All-args constructor.
     * @param dt The new value for dt
     * @param simId The new value for simId
     * @param mcId The new value for mcId
     * @param lineNo The new value for lineNo
     * @param checkPort The new value for checkPort
     * @param piecesIndex The new value for piecesIndex
     */
    public WbOlpRawDataCompositeKey(java.time.Instant dt, java.lang.CharSequence simId, java.lang.CharSequence mcId, java.lang.Integer lineNo, java.lang.Integer checkPort, java.lang.Integer piecesIndex) {
        this.dt = dt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
        this.simId = simId;
        this.mcId = mcId;
        this.lineNo = lineNo;
        this.checkPort = checkPort;
        this.piecesIndex = piecesIndex;
    }

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<WbOlpRawDataCompositeKey> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<WbOlpRawDataCompositeKey> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<WbOlpRawDataCompositeKey> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Deserializes a WbOlpRawDataCompositeKey from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a WbOlpRawDataCompositeKey instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static WbOlpRawDataCompositeKey fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    /**
     * Creates a new WbOlpRawDataCompositeKey RecordBuilder.
     * @return A new WbOlpRawDataCompositeKey RecordBuilder
     */
    public static com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder newBuilder() {
        return new com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder();
    }

    /**
     * Creates a new WbOlpRawDataCompositeKey RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new WbOlpRawDataCompositeKey RecordBuilder
     */
    public static com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder newBuilder(com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder other) {
        if (other == null) {
            return new com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder();
        } else {
            return new com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder(other);
        }
    }

    /**
     * Creates a new WbOlpRawDataCompositeKey RecordBuilder by copying an existing WbOlpRawDataCompositeKey instance.
     * @param other The existing instance to copy.
     * @return A new WbOlpRawDataCompositeKey RecordBuilder
     */
    public static com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder newBuilder(com.qtech.mq.serializer.WbOlpRawDataCompositeKey other) {
        if (other == null) {
            return new com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder();
        } else {
            return new com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder(other);
        }
    }

    /**
     * Serializes this WbOlpRawDataCompositeKey to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return dt;
            case 1:
                return simId;
            case 2:
                return mcId;
            case 3:
                return lineNo;
            case 4:
                return checkPort;
            case 5:
                return piecesIndex;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                dt = (java.time.Instant) value$;
                break;
            case 1:
                simId = (java.lang.CharSequence) value$;
                break;
            case 2:
                mcId = (java.lang.CharSequence) value$;
                break;
            case 3:
                lineNo = (java.lang.Integer) value$;
                break;
            case 4:
                checkPort = (java.lang.Integer) value$;
                break;
            case 5:
                piecesIndex = (java.lang.Integer) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'dt' field.
     * @return The value of the 'dt' field.
     */
    public java.time.Instant getDt() {
        return dt;
    }

    /**
     * Sets the value of the 'dt' field.
     * @param value the value to set.
     */
    public void setDt(java.time.Instant value) {
        this.dt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Gets the value of the 'simId' field.
     * @return The value of the 'simId' field.
     */
    public java.lang.CharSequence getSimId() {
        return simId;
    }

    /**
     * Sets the value of the 'simId' field.
     * @param value the value to set.
     */
    public void setSimId(java.lang.CharSequence value) {
        this.simId = value;
    }

    /**
     * Gets the value of the 'mcId' field.
     * @return The value of the 'mcId' field.
     */
    public java.lang.CharSequence getMcId() {
        return mcId;
    }

    /**
     * Sets the value of the 'mcId' field.
     * @param value the value to set.
     */
    public void setMcId(java.lang.CharSequence value) {
        this.mcId = value;
    }

    /**
     * Gets the value of the 'lineNo' field.
     * @return The value of the 'lineNo' field.
     */
    public int getLineNo() {
        return lineNo;
    }

    /**
     * Sets the value of the 'lineNo' field.
     * @param value the value to set.
     */
    public void setLineNo(int value) {
        this.lineNo = value;
    }

    /**
     * Gets the value of the 'checkPort' field.
     * @return The value of the 'checkPort' field.
     */
    public int getCheckPort() {
        return checkPort;
    }

    /**
     * Sets the value of the 'checkPort' field.
     * @param value the value to set.
     */
    public void setCheckPort(int value) {
        this.checkPort = value;
    }

    /**
     * Gets the value of the 'piecesIndex' field.
     * @return The value of the 'piecesIndex' field.
     */
    public int getPiecesIndex() {
        return piecesIndex;
    }

    /**
     * Sets the value of the 'piecesIndex' field.
     * @param value the value to set.
     */
    public void setPiecesIndex(int value) {
        this.piecesIndex = value;
    }

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    /**
     * RecordBuilder for WbOlpRawDataCompositeKey instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WbOlpRawDataCompositeKey>
            implements org.apache.avro.data.RecordBuilder<WbOlpRawDataCompositeKey> {

        private java.time.Instant dt;
        private java.lang.CharSequence simId;
        private java.lang.CharSequence mcId;
        private int lineNo;
        private int checkPort;
        private int piecesIndex;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.dt)) {
                this.dt = data().deepCopy(fields()[0].schema(), other.dt);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.simId)) {
                this.simId = data().deepCopy(fields()[1].schema(), other.simId);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.mcId)) {
                this.mcId = data().deepCopy(fields()[2].schema(), other.mcId);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.lineNo)) {
                this.lineNo = data().deepCopy(fields()[3].schema(), other.lineNo);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.checkPort)) {
                this.checkPort = data().deepCopy(fields()[4].schema(), other.checkPort);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.piecesIndex)) {
                this.piecesIndex = data().deepCopy(fields()[5].schema(), other.piecesIndex);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
        }

        /**
         * Creates a Builder by copying an existing WbOlpRawDataCompositeKey instance
         * @param other The existing instance to copy.
         */
        private Builder(com.qtech.mq.serializer.WbOlpRawDataCompositeKey other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.dt)) {
                this.dt = data().deepCopy(fields()[0].schema(), other.dt);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.simId)) {
                this.simId = data().deepCopy(fields()[1].schema(), other.simId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.mcId)) {
                this.mcId = data().deepCopy(fields()[2].schema(), other.mcId);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.lineNo)) {
                this.lineNo = data().deepCopy(fields()[3].schema(), other.lineNo);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.checkPort)) {
                this.checkPort = data().deepCopy(fields()[4].schema(), other.checkPort);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.piecesIndex)) {
                this.piecesIndex = data().deepCopy(fields()[5].schema(), other.piecesIndex);
                fieldSetFlags()[5] = true;
            }
        }

        /**
         * Gets the value of the 'dt' field.
         * @return The value.
         */
        public java.time.Instant getDt() {
            return dt;
        }


        /**
         * Sets the value of the 'dt' field.
         * @param value The value of 'dt'.
         * @return This builder.
         */
        public com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder setDt(java.time.Instant value) {
            validate(fields()[0], value);
            this.dt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'dt' field has been set.
         * @return True if the 'dt' field has been set, false otherwise.
         */
        public boolean hasDt() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'dt' field.
         * @return This builder.
         */
        public com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder clearDt() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'simId' field.
         * @return The value.
         */
        public java.lang.CharSequence getSimId() {
            return simId;
        }


        /**
         * Sets the value of the 'simId' field.
         * @param value The value of 'simId'.
         * @return This builder.
         */
        public com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder setSimId(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.simId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'simId' field has been set.
         * @return True if the 'simId' field has been set, false otherwise.
         */
        public boolean hasSimId() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'simId' field.
         * @return This builder.
         */
        public com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder clearSimId() {
            simId = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'mcId' field.
         * @return The value.
         */
        public java.lang.CharSequence getMcId() {
            return mcId;
        }


        /**
         * Sets the value of the 'mcId' field.
         * @param value The value of 'mcId'.
         * @return This builder.
         */
        public com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder setMcId(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.mcId = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'mcId' field has been set.
         * @return True if the 'mcId' field has been set, false otherwise.
         */
        public boolean hasMcId() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'mcId' field.
         * @return This builder.
         */
        public com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder clearMcId() {
            mcId = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'lineNo' field.
         * @return The value.
         */
        public int getLineNo() {
            return lineNo;
        }


        /**
         * Sets the value of the 'lineNo' field.
         * @param value The value of 'lineNo'.
         * @return This builder.
         */
        public com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder setLineNo(int value) {
            validate(fields()[3], value);
            this.lineNo = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'lineNo' field has been set.
         * @return True if the 'lineNo' field has been set, false otherwise.
         */
        public boolean hasLineNo() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'lineNo' field.
         * @return This builder.
         */
        public com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder clearLineNo() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'checkPort' field.
         * @return The value.
         */
        public int getCheckPort() {
            return checkPort;
        }


        /**
         * Sets the value of the 'checkPort' field.
         * @param value The value of 'checkPort'.
         * @return This builder.
         */
        public com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder setCheckPort(int value) {
            validate(fields()[4], value);
            this.checkPort = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'checkPort' field has been set.
         * @return True if the 'checkPort' field has been set, false otherwise.
         */
        public boolean hasCheckPort() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'checkPort' field.
         * @return This builder.
         */
        public com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder clearCheckPort() {
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'piecesIndex' field.
         * @return The value.
         */
        public int getPiecesIndex() {
            return piecesIndex;
        }


        /**
         * Sets the value of the 'piecesIndex' field.
         * @param value The value of 'piecesIndex'.
         * @return This builder.
         */
        public com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder setPiecesIndex(int value) {
            validate(fields()[5], value);
            this.piecesIndex = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'piecesIndex' field has been set.
         * @return True if the 'piecesIndex' field has been set, false otherwise.
         */
        public boolean hasPiecesIndex() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'piecesIndex' field.
         * @return This builder.
         */
        public com.qtech.mq.serializer.WbOlpRawDataCompositeKey.Builder clearPiecesIndex() {
            fieldSetFlags()[5] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public WbOlpRawDataCompositeKey build() {
            try {
                WbOlpRawDataCompositeKey record = new WbOlpRawDataCompositeKey();
                record.dt = fieldSetFlags()[0] ? this.dt : (java.time.Instant) defaultValue(fields()[0]);
                record.simId = fieldSetFlags()[1] ? this.simId : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.mcId = fieldSetFlags()[2] ? this.mcId : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.lineNo = fieldSetFlags()[3] ? this.lineNo : (java.lang.Integer) defaultValue(fields()[3]);
                record.checkPort = fieldSetFlags()[4] ? this.checkPort : (java.lang.Integer) defaultValue(fields()[4]);
                record.piecesIndex = fieldSetFlags()[5] ? this.piecesIndex : (java.lang.Integer) defaultValue(fields()[5]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

}










